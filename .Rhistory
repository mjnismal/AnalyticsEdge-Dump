(.64-.5)/(.5)
(0.6309615-.5)/(.5)
(0.24954448-0.6309615)/(0.24954448-1)
(0.28279426-0.6434615)/(0.28279426-1)
# install.packages("rpart.plot")
library(rpart.plot)
library(rpart)
stevens = read.csv("https://prod-edxapp.edx-cdn.org/assets/courseware/v1/80dfa0ae5eb3fa2013a34507cd58fabb/asset-v1:MITx+15.071x+2T2017+type@asset+block/stevens.csv")
head(stevens)
# install.packages("caTools")
library(caTools)
set.seed(3000)
spl = sample.split(stevens$Reverse,SplitRatio = .7)
Train = subset(stevens,spl==T)
Test = subset(stevens,spl==F)
head(Test)
set.seed(3000)
StevensTree = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 25)
prp(StevensTree)
PredictCART = predict(StevensTree,newdata=Test,type='class')
table(Test$Reverse,PredictCART)
#accuracy
(41+71)/(41+22+36+71)
library(ROCR)
PredictROC = predict(StevensTree,newdata = Test)
head(PredictROC)
pred =prediction(PredictROC[,2],Test$Reverse)
perf = performance(pred,"tpr","fpr")
plot(perf)
as.numeric(performance(pred, "auc")@y.values)
set.seed(3000)
StevensTree1 = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 5)
prp(StevensTree1)
#Overfitting may occur
set.seed(3000)
StevensTree2 = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 100)
prp(StevensTree2)
#simple tree with no predictive value
install.packages("randomForest")
library(randomForest)
Train$Reverse = as.factor(Train$Reverse)
set.seed(200)
StevensForest=randomForest(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,nodesize=25,ntree=200)
PredictForest = predict(StevensForest,newdata = Test)
table(Test$Reverse,PredictForest)
#May not be the same as the course as there is a random component in using randomForest. Consider using set.seed() for uniformity sake
(44+76)/(43+73+20+34)
#
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
library(caret)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.19)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
download.file("https://prod-edxapp.edx-cdn.org/assets/courseware/v1/1118f7556bc4faccd180540e7ee7b83a/asset-v1:MITx+15.071x+2T2017+type@asset+block/ClaimsData.csv.zip","ClaimsData.zip")
z  = unz("ClaimsData.zip",filename = "ClaimsData.csv")
ClaimsData = read.csv(z)
head(ClaimsData)
str(ClaimsData)
table(ClaimsData$bucket2009)/nrow(ClaimsData)
#install.packages("caTools")
library(caTools)
set.seed(88)
spl = sample.split(ClaimsData$bucket2009,SplitRatio = 0.6)
ClaimsTrain = subset(ClaimsData,spl==T)
ClaimsTest = subset(ClaimsData,spl==F)
head(ClaimsTest)
head(ClaimsTrain)
# library(dplyr)
"What is the average age of patients in the training set, ClaimsTrain?"
mean(ClaimsTrain$age)
"What proportion of people in the training set (ClaimsTrain) had at least one diagnosis code for diabetes?"
sum(ClaimsTrain$diabetes!=0)/nrow(ClaimsTrain)
table(ClaimsTest$bucket2009,ClaimsTest$bucket2008,dnn = list("2009","2008"))
(110138+10721+2774+ 1539+ 104)/nrow(ClaimsTest)
PenaltyMatrix = matrix(c(0,1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0),byrow =T,nrow=5)
PenaltyMatrix
as.matrix(table(ClaimsTest$bucket2009,ClaimsTest$bucket2008))*PenaltyMatrix #Penalty error by outcome x expected
sum(as.matrix(table(ClaimsTest$bucket2009,ClaimsTest$bucket2008))*PenaltyMatrix)/nrow(ClaimsTest) #Penalty Error
table(ClaimsTest$bucket2009)
122978/nrow(ClaimsTest)
table(ClaimsTest$bucket2009)*c(0,2,4,6,8)
sum(table(ClaimsTest$bucket2009)*c(0,2,4,6,8))/nrow(ClaimsTest)
library(rpart)
library(rpart.plot)
ClaimsTree = rpart(bucket2009 ~ age + alzheimers+arthritis+cancer+copd+depression+diabetes+heart.failure+ihd+kidney+osteoporosis+stroke,data =ClaimsTrain,method="class",cp=0.00005,parms = list(loss = PenaltyMatrix))
prp(ClaimsTree)
PredictTest = predict(ClaimsTree,newdata=ClaimsTest,type="class")
table(ClaimsTest$bucket2009,PredictTest)
(115774+13025+22)/nrow(ClaimsTest)
as.matrix(table(ClaimsTest$bucket2009,PredictTest))*PenaltyMatrix
sum(as.matrix(table(ClaimsTest$bucket2009,PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
PredictCART = predict(StevensTree,newdata=Test,type='class')
table(Test$Reverse,PredictCART)
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
```{r}
# install.packages("rpart.plot")
library(rpart.plot)
library(rpart)
stevens = read.csv("https://prod-edxapp.edx-cdn.org/assets/courseware/v1/80dfa0ae5eb3fa2013a34507cd58fabb/asset-v1:MITx+15.071x+2T2017+type@asset+block/stevens.csv")
head(stevens)
```
```{r}
# install.packages("caTools")
library(caTools)
set.seed(3000)
spl = sample.split(stevens$Reverse,SplitRatio = .7)
Train = subset(stevens,spl==T)
Test = subset(stevens,spl==F)
head(Test)
```
```{r}
set.seed(3000)
StevensTree = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 25)
prp(StevensTree)
```
```{r}
PredictCART = predict(StevensTree,newdata=Test,type='class')
table(Test$Reverse,PredictCART)
```
```{r}
#accuracy
(41+71)/(41+22+36+71)
```
```{r}
library(ROCR)
PredictROC = predict(StevensTree,newdata = Test)
head(PredictROC)
```
```{r}
pred =prediction(PredictROC[,2],Test$Reverse)
perf = performance(pred,"tpr","fpr")
plot(perf)
```
```{r}
as.numeric(performance(pred, "auc")@y.values)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
```{r}
set.seed(3000)
StevensTree1 = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 5)
prp(StevensTree1)
#Overfitting may occur
```
```{r}
set.seed(3000)
StevensTree2 = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 100)
prp(StevensTree2)
#simple tree with no predictive value
```
```{r}
install.packages("randomForest")
library(randomForest)
Train$Reverse = as.factor(Train$Reverse)
set.seed(200)
StevensForest=randomForest(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,nodesize=25,ntree=200)
PredictForest = predict(StevensForest,newdata = Test)
table(Test$Reverse,PredictForest)
#May not be the same as the course as there is a random component in using randomForest. Consider using set.seed() for uniformity sake
(44+76)/(43+73+20+34)
#
```
```{r}
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
library(caret)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
```
```{r}
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.19)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
```
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
## Healthcare analytics
```{r}
download.file("https://prod-edxapp.edx-cdn.org/assets/courseware/v1/1118f7556bc4faccd180540e7ee7b83a/asset-v1:MITx+15.071x+2T2017+type@asset+block/ClaimsData.csv.zip","ClaimsData.zip")
# install.packages("rpart.plot")
library(rpart.plot)
library(rpart)
stevens = read.csv("https://prod-edxapp.edx-cdn.org/assets/courseware/v1/80dfa0ae5eb3fa2013a34507cd58fabb/asset-v1:MITx+15.071x+2T2017+type@asset+block/stevens.csv")
head(stevens)
# install.packages("caTools")
library(caTools)
set.seed(3000)
spl = sample.split(stevens$Reverse,SplitRatio = .7)
Train = subset(stevens,spl==T)
Test = subset(stevens,spl==F)
head(Test)
set.seed(3000)
StevensTree = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 25)
prp(StevensTree)
PredictCART = predict(StevensTree,newdata=Test,type='class')
table(Test$Reverse,PredictCART)
#accuracy
(41+71)/(41+22+36+71)
library(ROCR)
PredictROC = predict(StevensTree,newdata = Test)
head(PredictROC)
pred =prediction(PredictROC[,2],Test$Reverse)
perf = performance(pred,"tpr","fpr")
plot(perf)
as.numeric(performance(pred, "auc")@y.values)
set.seed(3000)
StevensTree1 = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 5)
prp(StevensTree1)
#Overfitting may occur
set.seed(3000)
StevensTree2 = rpart(Reverse~Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst,data=Train,method="class",minbucket = 100)
prp(StevensTree2)
#simple tree with no predictive value
install.packages("randomForest")
library(randomForest)
Train$Reverse = as.factor(Train$Reverse)
set.seed(200)
StevensForest=randomForest(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,nodesize=25,ntree=200)
PredictForest = predict(StevensForest,newdata = Test)
table(Test$Reverse,PredictForest)
#May not be the same as the course as there is a random component in using randomForest. Consider using set.seed() for uniformity sake
(44+76)/(43+73+20+34)
#
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
library(caret)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
install.packages("randomForest")
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.19)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
download.file("https://prod-edxapp.edx-cdn.org/assets/courseware/v1/1118f7556bc4faccd180540e7ee7b83a/asset-v1:MITx+15.071x+2T2017+type@asset+block/ClaimsData.csv.zip","ClaimsData.zip")
z  = unz("ClaimsData.zip",filename = "ClaimsData.csv")
ClaimsData = read.csv(z)
head(ClaimsData)
str(ClaimsData)
table(ClaimsData$bucket2009)/nrow(ClaimsData)
#install.packages("caTools")
library(caTools)
set.seed(88)
spl = sample.split(ClaimsData$bucket2009,SplitRatio = 0.6)
ClaimsTrain = subset(ClaimsData,spl==T)
ClaimsTest = subset(ClaimsData,spl==F)
head(ClaimsTest)
head(ClaimsTrain)
# library(dplyr)
"What is the average age of patients in the training set, ClaimsTrain?"
mean(ClaimsTrain$age)
"What proportion of people in the training set (ClaimsTrain) had at least one diagnosis code for diabetes?"
sum(ClaimsTrain$diabetes!=0)/nrow(ClaimsTrain)
table(ClaimsTest$bucket2009,ClaimsTest$bucket2008,dnn = list("2009","2008"))
(110138+10721+2774+ 1539+ 104)/nrow(ClaimsTest)
PenaltyMatrix = matrix(c(0,1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0),byrow =T,nrow=5)
PenaltyMatrix
as.matrix(table(ClaimsTest$bucket2009,ClaimsTest$bucket2008))*PenaltyMatrix #Penalty error by outcome x expected
sum(as.matrix(table(ClaimsTest$bucket2009,ClaimsTest$bucket2008))*PenaltyMatrix)/nrow(ClaimsTest) #Penalty Error
table(ClaimsTest$bucket2009)
122978/nrow(ClaimsTest)
table(ClaimsTest$bucket2009)*c(0,2,4,6,8)
sum(table(ClaimsTest$bucket2009)*c(0,2,4,6,8))/nrow(ClaimsTest)
library(rpart)
library(rpart.plot)
ClaimsTree = rpart(bucket2009 ~ age + alzheimers+arthritis+cancer+copd+depression+diabetes+heart.failure+ihd+kidney+osteoporosis+stroke,data =ClaimsTrain,method="class",cp=0.00005,parms = list(loss = PenaltyMatrix))
prp(ClaimsTree)
PredictTest = predict(ClaimsTree,newdata=ClaimsTest,type="class")
table(ClaimsTest$bucket2009,PredictTest)
(115774+13025+22)/nrow(ClaimsTest)
as.matrix(table(ClaimsTest$bucket2009,PredictTest))*PenaltyMatrix
sum(as.matrix(table(ClaimsTest$bucket2009,PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
library(caret)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.19)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.19)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
?train
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
library(caret)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
z = train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
library(caret)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
z = train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
z
# install.packages("caret")
# install.packages("e1071")
# install.packages("ggplot2")
library(e1071)
library(caret)
set.seed(200)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
z = train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
z
z$results
z$bestTune
x = 0.28550465
z = 0.6443590
z = train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
z
z
set.seed(200)
numFolds = trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
z = train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,
data = Train,
method = "rpart",
trControl=numFolds,
tuneGrid=cpGrid)
z
str(z)
z$resample
mean(z$resample$Accuracy)
z$resampleCM
z$resampledCM
z$resampleCM
z$resample
mean(z$resample$Kappa)
mean(z$resample$Accuracy)
(mean(z$resample$Accuracy) - .5)/.5
(0.6443590+0.28550465)/(0.28550465+1)
?printcp
printcp(StevensTreeCV)
.78333-.96111
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.17)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
printcp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.02)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
printcp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.05)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.05)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.05)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
printcp(StevensTreeCV)
summary(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.17)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
summary(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.05)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(59+64)/(59+64+18+29)
prp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.05)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(27+82)/(11+27+82+50)
prp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.17)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(27+82)/(11+27+82+50)
prp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.05)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(27+82)/(11+27+82+50)
prp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.17)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(27+82)/(11+27+82+50)
prp(StevensTreeCV)
StevensTreeCV = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data =Train,method="class",cp=0.17)
PredictCV = predict(StevensTreeCV,newdata = Test,type="class")
table(Test$Reverse,PredictCV)
(27+82)/(11+27+82+50)
(59+64)/(59+64+29+18)
prp(StevensTreeCV)
printcp(StevensTreeCV)
summary(StevensTreeCV)
